{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Login from \"./Login\";\nimport { Route, Routes } from \"react-router-native\";\nimport { useFonts } from \"expo-font\";\nimport { useEffect } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Main = function Main() {\n  var _useFonts = useFonts({\n      Ultra: require(\"../assets/fonts/Roboto/Roboto-Light.ttf\"),\n      Ultra: require(\"../assets/fonts/Roboto/Roboto-Bold.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  useEffect(function () {\n    function prepare() {\n      return _prepare.apply(this, arguments);\n    }\n    function _prepare() {\n      _prepare = _asyncToGenerator(function* () {\n        yield Spla;\n      });\n      return _prepare.apply(this, arguments);\n    }\n    prepare();\n  }, []);\n  if (!fontsLoaded) return null;\n  return _jsx(View, {\n    children: _jsx(Routes, {\n      children: _jsx(Route, {\n        path: \"/\",\n        element: _jsx(Login, {})\n      })\n    })\n  });\n};\nexport default Main;","map":{"version":3,"names":["Login","Route","Routes","useFonts","useEffect","jsx","_jsx","Main","_useFonts","Ultra","require","_useFonts2","_slicedToArray","fontsLoaded","prepare","_prepare","apply","arguments","_asyncToGenerator","Spla","View","children","path","element"],"sources":["/home/bruno/Documents/GitHub/appQ/src/Main.jsx"],"sourcesContent":["import { View } from \"react-native\";\nimport Login from \"./Login\";\nimport { Route, Routes } from \"react-router-native\";\nimport { useFonts } from \"expo-font\";\nimport { useEffect } from \"react\";\nconst Main = () => {\n  const [fontsLoaded] = useFonts({\n    Ultra: require(\"../assets/fonts/Roboto/Roboto-Light.ttf\"),\n    Ultra: require(\"../assets/fonts/Roboto/Roboto-Bold.ttf\"),\n  });\n\n  useEffect(() => {\n    async function prepare() {\n      await Spla;\n    }\n    prepare();\n  }, []);\n\n  if (!fontsLoaded) return null;\n\n  return (\n    <View>\n      <Routes>\n        <Route path=\"/\" element={<Login />} />\n      </Routes>\n    </View>\n  );\n};\n\nexport default Main;\n"],"mappings":";;;AACA,OAAOA,KAAK;AACZ,SAASC,KAAK,EAAEC,MAAM,QAAQ,qBAAqB;AACnD,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAClC,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;EACjB,IAAAC,SAAA,GAAsBL,QAAQ,CAAC;MAC7BM,KAAK,EAAEC,OAAO,0CAA0C,CAAC;MACzDD,KAAK,EAAEC,OAAO,yCAAyC;IACzD,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAJ,SAAA;IAHKK,WAAW,GAAAF,UAAA;EAKlBP,SAAS,CAAC,YAAM;IAAA,SACCU,OAAOA,CAAA;MAAA,OAAAC,QAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IAAA,SAAAF,SAAA;MAAAA,QAAA,GAAAG,iBAAA,CAAtB,aAAyB;QACvB,MAAMC,IAAI;MACZ,CAAC;MAAA,OAAAJ,QAAA,CAAAC,KAAA,OAAAC,SAAA;IAAA;IACDH,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACD,WAAW,EAAE,OAAO,IAAI;EAE7B,OACEP,IAAA,CAACc,IAAI;IAAAC,QAAA,EACHf,IAAA,CAACJ,MAAM;MAAAmB,QAAA,EACLf,IAAA,CAACL,KAAK;QAACqB,IAAI,EAAC,GAAG;QAACC,OAAO,EAAEjB,IAAA,CAACN,KAAK,IAAE;MAAE,CAAE;IAAC,CAChC;EAAC,CACL,CAAC;AAEX,CAAC;AAED,eAAeO,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}